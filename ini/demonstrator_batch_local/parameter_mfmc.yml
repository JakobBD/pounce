general:
  project_name: mfmc             # used as a prefix for most generated files
  do_pickle: False               # save the state of the simulation after each step in pickle files in a subfolder for restarts
  main_stages:                   # list of stages, which are externally run pre- and post-processing steps as well as the main 
                                 # simulation. Possible names of stages have to be specified in the specific solver subclass. 
                                 # See the 'ice' ini files for a multi-stage example.
  - name: main

uq_method:
  _type: mfmc                    # UQ method to be used
  total_work: 0.2                # computaitonal budget. The unit is core-seconds
  n_warmup_samples : 5           # number of pilot samples with every model
  reuse_warmup_samples : False   # include the pilot samples (which are used for optimal sample number and control variate 
                                 # coefficient estimation) in the sample set used for the eventual estimator. This is not done by 
                                 # Peherstorfer et al., as it may introduce a bias, but in practice it often increases 
                                 # computational efficiency. 
  update_alpha : False           # estimate control variate coefficients based on the samples of both iterations

sampling:
  fixed_seed: true               # set seed for pseudo-random number generator; this way, the same samples will be drawn every run.

models:                          # list of models/solvers used. Each parameter given outside the 'fidelities' list is used for every
                                 # model; individual parameters are given inside this list.
                                 # Be careful: In MLMC, the list is called 'solver' and the 'fidelities' are called 'levels'
  _type: demonstrator_batch      # determines the solver subclass to be used
  exe_path: ../externals/demonstrators/batch.py
                                 # path of the external solver executable; 
                                 # given relative to a directory one level below the repository here. 
  cores_per_sample: 1            # number of parallel cores for a single sample
  fidelities:
  - name: HF                     # model name used for stdout
    solver_prms:                 # list of parameters passed to the solver
      ModelName: hf              # model name used for file name prefixes; for this specific solver, it also determines its behaviour
  - name: LF1
    solver_prms: 
      ModelName: lf1
  - name: LF2
    solver_prms: 
      ModelName: lf2
  - name: LF3
    solver_prms: 
      ModelName: lf3

stoch_vars:                      # list of uncertain parameters 
- _type: uniform                 # random distribution
  bounds: [-1.,1.]               # bounds of uniform distribution

machine:                         # list of machines that simulations are run on; several machines can be used within one
                                 # simulation; if only one is given, no list is used.
  _type: local                   # machine subclass; local means no scheduler is needed.
  parallelization: mpi           # how to run several samples in parallel; options: none (run all in sequential), mpi (run all in
                                 # one batch with a modified solver), gnu: parallel runs based on GNU parallel
  n_max_cores: 2                 # maximum number of parallel cores available on the machine for this simulation

qois:                            # quantities of interest; several can be evaluated in one simulation; defined along with the 
                                 # solver in the file of the accroding subclass
- _type: standard                # QoI name to specify the according subclass
  optimize: True                 # base optimal control variate coefficients and sample numbers on this QoI 
                                 # (must be true for exactly one)
